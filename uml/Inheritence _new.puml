@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
    + generateProp():AbstractProp
 }

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    - startTime:int
    - linitTime:int
    + AbstractProp(int locationX, int locationY)
    + setStartTime(int startTime):void
    + getStartTime():int
    + {abstract} operate(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
     List<BaseBullet> enemybullet):void
    + {abstract} timeLimitExceeded(int currentTime):boolean
    + {abstract} setInvalid(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- BossEnemy
AbstractAircraft <|-- EliteEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- PropBlood
AbstractProp <|-- PropBomb
AbstractProp <|-- PropBullet

class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + increaseHp(int increase):void
    + increaseFire(int increaseShootNum, int increasePower):void
}

class BossEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + generateProp():AbstractProp
}

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + generateProp():AbstractProp
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class PropBlood {
    - returnBlood:int
    + PropBlood(int locationX, int locationY)
    + operate(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
    + timeLimitExceeded(int currentTime):boolean
    + setInvalid(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
}

class PropBomb {
    + PropBomb(int locationX, int locationY)
    + operate(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
    + timeLimitExceeded(int currentTime):boolean
    + setInvalid(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
}

class PropBullet {
    - increaseShootNum:int
    - increasePower:int
    - linitTime:int
    + PropBullet(int locationX, int locationY)
    + operate(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
    + timeLimitExceeded(int currentTime):boolean
    + setInvalid(HeroAircraft heroaircraft, List<AbstractAircraft> enemyaircraft,
    List<BaseBullet> enemybullet):void
}

@enduml