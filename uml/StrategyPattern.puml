@startuml
'https://plantuml.com/class-diagram

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootStrategy:ShootStrategyInterface
    # shootNum:int
    # power:int
    # direction:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int shootNum, int power, ShootStrategyInterface shootStrategy)
    + decreaseHp(int decrease):void
    + setStrategy(ShootStrategyInterface strategy):void
    + shoot():List<BaseBullet>
}

interface ShootStrategyInterface {
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
}

AbstractAircraft <.up. BossEnemyFactory
AbstractAircraft <.up. EliteEnemyFactory
AbstractAircraft <.up. game
AbstractAircraft <.up. PropBullet
AbstractAircraft <.down. HeroAircraft
AbstractAircraft o--> ShootStrategyInterface
ShootStrategyInterface <|.. DirectShootStrategy
ShootStrategyInterface <|.. ScatterShootStrategy
ShootStrategyInterface <|.. SweepShootStrategy

class HeroAircraft {
    - {static} heroAircraft:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int shootNum, int power, ShootStrategyInterface shootStrategy)
    + {static} getHeroAircraft():HeroAircraft
}

class EliteEnemyFactory {
    + createEnemyAircraft(int hp, int speedY):AbstractEnemyAircraft
}

class BossEnemyFactory {
    + createEnemyAircraft(int hp, int speedY):AbstractEnemyAircraft
}

class DirectShootStrategy {
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
}

class ScatterShootStrategy {
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
}

class SweepShootStrategy {
    + shoot(AbstractAircraft aircraft):List<BaseBullet>
}

class game{
    # heroShootAction():void
    # enemyShootAction():void
}

class PropBullet{
    + operate():void
}

@enduml