@startuml
'https://plantuml.com/class-diagram

 abstract class AbstractEnemyAircraft
 {
    # direction:int
    - abstractPropFactory:AbstractPropFactory
    + AbstractEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + generateProp():AbstractProp
 }

abstract class AbstractEnemyAircraftFactory
{
    + {abstract} createEnemyAircraft():AbstractEnemyAircraft
}

AbstractEnemyAircraft <|-- MobEnemy
AbstractEnemyAircraft <|-- BossEnemy
AbstractEnemyAircraft <|-- EliteEnemy

AbstractEnemyAircraftFactory <|-- BossEnemyFactory
AbstractEnemyAircraftFactory <|-- EliteEnemyFactory
AbstractEnemyAircraftFactory <|-- MobEnemyFactory

AbstractEnemyAircraft <|.. AbstractEnemyAircraftFactory
MobEnemy <|.. MobEnemyFactory
BossEnemy <|.. BossEnemyFactory
EliteEnemy <|.. EliteEnemyFactory

class BossEnemy {
    - shootNum:int
    - power:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class EliteEnemy {
    - shootNum:int
    - power:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + generateProp():AbstractProp
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + generateProp():AbstractProp
}

class BossEnemyFactory {
    + createEnemyAircraft():AbstractEnemyAircraft
}

class EliteEnemyFactory {
    + createEnemyAircraft():AbstractEnemyAircraft
}

class MobEnemyFactory {
    + createEnemyAircraft():AbstractEnemyAircraft
}

@enduml